<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>KnitShop, a game for learning to code</title>
<script>
/*
<Add a description of the game here>

The code in this game is built upon a javascript interpreter by 
Peter Jipsen - referenced here by way of thanks.
Version of Jan 3, 2013, (c) Peter Jipsen http://www.chapman.edu/~jipsen
Latest version at http://www.chapman.edu/~jipsen/js
If you use it on a webpage, please send the URL to jipsen@chapman.edu

Mr. Jipsen's interpreter and this game are both 
free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License (at http://www.gnu.org/copyleft/gpl.html) 
for more details.
*/

// If I put this here, is it a global variable?
var KnitShopXPosition=0;
var KnitShopYPosition=0;
//var KnitShopStitchHeight=23;
//var KnitShopStitchWidth=38;
var KnitShopStitchHeight=18;
var KnitShopStitchWidth=30;
var stitches = [];
var alreadyDrawing;
var ksr,ksg,ksb;
var knitspeed = 200;

var csCurrentLevel = 0;
var csLevelsCompleted = [];
var csLevels = [1.0,1.1];

var csSnarkyRemarks = ["This is nice, but it's not what I ordered.",
	"Yuck, that looks like a baby knitted it, and then a dog ate it!",
	"This would be fine, if I had asked for something completely different.",
	"Lol, you're just getting started, aren't you?",
	"This isn't from the same PLANET as the scarf I ordered!"
];
var csCongrats = [
	"Oh, how lovely - thank you!!!",
	"I knew I came to the right place, this is wonderful!",
	"It's even prettier than I imagined!"
];

JSoutput = function(a) {
    var str = "["
    if (typeof(a)=="object" && a.length) {
        for (var i=0; i < a.length; i++) 
            if (typeof(a[i])=="object" && a[i].length) {
                str += (i==0?"":" ")+"["
                for (var j=0; j<a[i].length; j++) 
                    str += a[i][j]+(j==a[i].length-1?
                            "]"+(i==a.length-1?"]":",")+"\n":", ");
            } else str += a[i]+(i==a.length-1?"]":", ");
    } else str = a;
    return str;
}

/*write = function(str) {
    var outnode = document.getElementById("JSoutput");
    outnode.value += JSoutput(str);
}

writeln = function(str) {
    if (!str) str="";
    var outnode = document.getElementById("JSoutput");
    outnode.value += JSoutput(str)+"\n";
}*/

///////////////////////////////////////////
//  The Stitch Function                  //
//  argument: a color                    //
//  output: a single stitch on the       //
//     canvas in the given color.        //
///////////////////////////////////////////

/*stitch = function(str) {
    if (!str) str="white";
    var outnode = document.getElementById("JSoutput");
    outnode.value += JSoutput(str);
}*/

newRow = function() {
    /*if (!KnitShopYPosition) KnitShopYPosition=0;
    var outnode = document.getElementById("JSoutput");
    outnode.value += "\n";
    KnitShopYPosition += KnitShopStitchHeight;
    KnitShopXPosition = 0;
	var canvas = document.getElementById("canvas");
	var node = document.createElement("div");
	canvas.appendChild(node); */
	stitches.push("newrow");
	drawQueue();
}

stitchColor = function(str) {
    //KSWait(500);
    if(!str) str="black";
    switch (str) {
	case "black":
	   stitchRGB(0,0,0);
	   break;
	case "white":
	   stitchRGB(255,255,255);
	   break;    
	case "red":
	   stitchRGB(255,0,0);
	   break;
	case "green":
	   stitchRGB(0,255,0);
	   break;
	case "blue":
	   stitchRGB(0,0,255);
	   break;
	default:
	   stitchRGB(0,0,0);
    }
}

function stitchRGB(r,g,b) {
    if (!KnitShopXPosition) KnitShopXPosition=0;
    if (!KnitShopYPosition) KnitShopYPosition=0;
    //ksr=r;
    //ksg=g;
    //ksb=b;
    //var ctx=document.getElementById("canvas").getContext('2d'); 
    //ctx.fillStyle = 'rgba('+ksr+','+ksg+','+ksb+',1)';
    //ctx.fillRect(KnitShopXPosition,KnitShopYPosition,KnitShopStitchWidth,KnitShopStitchHeight);
    //requestAnimationFrame(draw);
	//*** setTimeout just doesn't work because it's asynchronous
    //setTimeout(function(){draw() }, 250);
    //KSWait(250);
	
	// the stitches array will hold all the stitches as RGB strings, in descending chron order.
    stitches.push(""+r+","+g+","+b+"");
	
	drawQueue();
    KnitShopXPosition += KnitShopStitchWidth;
    
    return true;
}

function drawQueue() {
	if(alreadyDrawing) {
		return;
	}
	alreadyDrawing = true;
	
	setTimeout(function drawStitches() {
		var drawColor = stitches.shift();
		if(!drawColor) {
			alreadyDrawing = false;
			//we've completed drawing the whole queue, now test for level completion
                        var lvlCompleted = csTestLevelCompleted();
		        if(lvlCompleted) {
		           //TODO: Congratulate user in an alert, then show the dialog for next level
           
		           csAdvanceLevel();
		        }
		        if(!lvlCompleted) {
		           //TODO: output something in the hint field
			   var ran = Math.random();
			   ran = Math.floor(ran*100 % csSnarkyRemarks.length);
			   $( "#csComments" ).html(csSnarkyRemarks[ran]);
		        }
                        
			return;
		}
		//If the previous if didn't catch, then we're still drawing the queue elements
		if(drawColor == "newrow") {
			drawNewRow();
		}
		else {
			draw(drawColor);
		}
		setTimeout(drawStitches, knitspeed);
	},knitspeed); //end of first setTimeout call
}

function draw(rgb) {
    //var ctx=document.getElementById("canvas").getContext('2d'); 
    //ctx.fillStyle = 'rgba('+ksr+','+ksg+','+ksb+',1)';
    //ctx.fillRect(KnitShopXPosition,KnitShopYPosition,KnitShopStitchWidth,KnitShopStitchHeight);
    //window.requestAnimationFrame(draw);
	
	var easel = document.getElementById("canvas").lastChild;
	//at this point, easel is the last div under canvas.
	var stitchnode = document.createElement("img");
	//stitchnode.setAttribute("src", "//public/images/stitch_semitrans.png");
        stitchnode.setAttribute("src", " <%= asset_path('stitch_semitrans.png')  %> "); //$(canvas).data("data-url");
	stitchnode.setAttribute("class","csStitch");
	stitchnode.setAttribute("style", "vertical-align:top; width:"+KnitShopStitchWidth+"px; height:"+KnitShopStitchHeight+"px; background-color:rgb("+rgb+")");
	//stitchnode.setAttribute("height", "23");
	//stitchnode.setAttribute("width","38");
	easel.appendChild(stitchnode);
	
	//desired resulting node: <img src="stitch.jpg" height="40" width="40" />
}
function drawNewRow() {
	var canvas = document.getElementById("canvas");
	var node = document.createElement("div");
	node.setAttribute("class","csRow");
	canvas.appendChild(node);
}

dummywait = function() {
  //do nothing.
  
}

//This function unfortunately didn't allow for a repaint between actions, so it's not useful
KSWait = function(KnitShopms){
//TODO: make KnitShopms variable depending on a configurable parameter.
    if(!KnitShopms || KnitShopms>10000) KnitShopms=250;
    var start = new Date().getTime();
    var current = new Date().getTime();
    var end = start+KnitShopms;
    while(current < end) {
       current = new Date().getTime();
    }
}

//TODO: define the size of the canvas, or query it, and add as numbers below
clearCanvas = function() {
    //var ctx=document.getElementById("canvas").getContext('2d');
    //ctx.clearRect(0,0,500,700);
	var canvas = document.getElementById("canvas");
	canvas.innerHTML = "<div class='csRow'></div>";
}

JSrun = function() {
    var str;
	alreadyDrawing = false;
    KnitShopXPosition = 0;
    KnitShopYPosition = 0;
    ksr=0;ksg=0;ksb=0;
    clearCanvas();

    var outnode = document.getElementById("JSoutput");
    outnode.value = "";
    d = new Date().getTime();
    try {
        with (Math) {
	    
            str = JSoutput(eval(document.getElementById("JSprogram").value));
        }
    } catch(e) {
        str = e.name+" at line "+(e.lineNumber-56)+": "+e.message;
    }
    var tnode = document.getElementById("JStiming");
    tnode.innerHTML = ""+(new Date().getTime()-d)/1000;
    if (str != undefined) {outnode.value += str;}

}

csTestLevelCompleted = function() {
   //TODO: think of a clever, visual-based test for level completion.
   /*
   Begin brainstorming rant. each row is a div class=csRow, so counting
   rows is a good start. $(".csRow").length will count them up, and
   $( ".csRow").each(function(index) { console.log("Row "+index+" has "+this.children().length+" children.");});
   */

   console.log("CSDEBUG: There are currently "+ $( ".csRow" ).length + " rows.");
   $( ".csRow").each(function(index) { console.log("CSDEBUG:    Row "+index+" has "+this.children.length+" children.");});
   switch (csCurrentLevel) {
	case 0:
	   var csRows = $(".csRow").length;
	   var csRowLength = 0;
	   $(".csRow").each(function(index) {csRowLength = this.children.length;});

	   if ( csRows == 1 && csRowLength == 1) {
		return true;
	   }
	   break;
	case 1:
	   var csRows = $(".csRow").length;
           var csRowLength = 0;
           $(".csRow").each(function(index) {csRowLength = this.children.length;});
           if ( csRows == 1 && csRowLength == 3) {
                //TODO: don't forget to check the color value!!!
		var csColorArray = "";
		$(".csStitch").each(function(index) {
			console.log(index+": "+this.style["background-color"]);
		   	csColorArray += this.style["background-color"];
			csColorArray +="-";
		});
		if (csColorArray == "rgb(255, 0, 0)-rgb(0, 255, 0)-rgb(0, 0, 255)-") {
		   return true;
		}
           }
	   break;
	case 2:
	   var csRows = $(".csRow").length;
	   var csRowLength = 0;
	   $(".csRow").each(function(index) {csRowLength = this.children.length;});
	   if ( csRows == 1 && csRowLength == 8) {
		//TODO: don't forget to check the color value!!!
		var returnval = true;
		$(".csStitch").each(function(index) {
		   if (this.style["background-color"] != "rgb(255, 0, 0)") returnval= false;
		   
		});
		return returnval;
	   }
	break;
   }
   return false;
}

csAdvanceLevel = function() {
   // move current level to the next one given a list of all levels
   csLevelsCompleted[csLevelsCompleted.length] = csLevels[csCurrentLevel];
   $(" #csComments ").html("");
   //TODO: update the button for this level to display completed colors
   switch (csCurrentLevel) {
	case 0:
	   $("#opener11").prop('disabled', false);
	   $("#opener11").click();
	   break;
	case 1:
	   $("#opener12").prop('disabled', false);
	   $("#opener12").click();
	   break;
	case 2:
	   //congratulate user on winning the game?
	   $( "#dialogEND" ).dialog( "open" );
	   break;
   }
   //csCurrentLevel += 1;
   
}

JSselect = function() {
    var id = document.getElementById("JSexamples").value;
    var str = document.getElementById(id).value;
    document.getElementById("JSprogram").value = str;
    JSrun();
}

keyUp = function(event){
  if (event.which==77 && event.ctrlKey) JSrun();
}

/*
//General TODO's
- Look up the pixel width on an ipad in portrait mode and make the <tr> containing the code and output
  add up to that width. No messing with percentages, make this explicit.
- must implement game flow and level logic.
- come up with at least 12 levels of incremental difficulty.
- find some way to animate the knitting instead of immediately showing the result.
*/
</script>
<script>
  //The following is JQuery UI scripting for User Interface effects
  $(function() {
    $( ".csDialog" ).dialog({
      autoOpen: false,
      show: {
        effect: "blind",
        duration: 1000
      },
      hide: {
        effect: "explode",
        duration: 1000
      }
    });
 
    $( "#opener10" ).click(function() {
      csCurrentLevel = 0;
      $( "#csLevelGoal").html("<p>Make a single stitch in any color</p>Hint:<br/><div class='csCode'>stitchColor(\"red\");</div><br/>");
      $( "#dialog10" ).dialog( "open" );
    });
    $( "#opener11" ).click(function() {
      csCurrentLevel = 1;
      $( "#csLevelGoal").html("<p>Make three stitches: Red, Green, then Blue.</p>Hint:<br/><div class='csCode'>stitchColor(\"red\");</div><br/>");
      $( "#dialog11" ).dialog( "open" );
    });
    $( "#opener12" ).click(function() {
      $( "#csLevelGoal").html("<p>Make a single stitch in any color</p>Hint:<br/><div class='csCode'>for(i=0;i<8;i++) { <br/>//something to do 8 times<br/>}</div><br/>");
      csCurrentLevel = 2;
      $( "#dialog12" ).dialog( "open" );
    });
    

    if(csCurrentLevel == 0) {
	$("#opener10").click();
    }
  });
  </script>
<style>td {background:white; vertical-align:top; border:1px solid black; padding:2px 10px}
pre {margin:0}
table {border-collapse:collapse; table-layout:fixed}
body {background:lightblue; font-family:Arial}
textarea {font-family:Lucida console}
</style>
</head>
<body onload="JSrun()"><!-- onpaste="return false;"-->
<h1><a href="http://playcodestitch.com">CodeStitch</a></h1>
<div class="csDialog" id="dialog10" title="Level 1.0: Open for Business!" style="width:400">
  <p>Introduction to level 1.0 ... Prompt user to make a single stitch in any color</p>
  <img src="<%= asset_path('stitch_semitrans.png') %>"  />
  <p>Displayed picture helps clarify goal.</p>
</div>
<div class="csDialog" id="dialog11" title="Level 1.1: Stitching in Colors">
  <p>Introduction to level 1.1 ... Prompt user to make 3 stitches in Red Green Blue</p>
  <img src="<%= asset_path('level1.1_goal.png') %>" />
  <p>The dialog window can be moved, resized and closed with the 'close' button.</p>
</div>
<div class="csDialog" id="dialog12" title="Level 1.2: Stitch a whole line">
  <p>Level 1.2 ... Prompt user to stitch a row of 8 Red stitches.</p>
  <img src="<%= asset_path('level1.2_goal.png') %>"  />
  <p>The dialog window can be moved, resized and closed with the 'close' button.</p>
</div>
<div class="csDialog" id="dialogEND" title="CONGRATULATIONS!">
  <p>You have completed all levels, you little genius.</p>
</div>

<table width="100%" align="center">

<tr>
<td rowspan=3 style="width:15%; background:lightblue;">Level Selection
<br/>
<button class="csDiaBtn" id="opener10">Level 1.0</button>
<button class="csDiaBtn" id="opener11" disabled="true">Level 1.1</button>
<button class="csDiaBtn" id="opener12" disabled="true">Level 1.2</button>
</td>
<td><b>Type JavaScript</b> &nbsp; &nbsp; Examples: <select id="JSexamples" onchange="JSselect()">
<option value="knitthree" selected>Knit Three</option>
<option value="knitcheckers">Knit Checkers</option>
<option value="knitdiagonal">Knit Diagonal</option>
<option value="knitstripes">Knit Stripes</option>

</select>
<br/>
<label>Slow: <input type="radio" name="trans" value="200" checked /></label>
<label>Med: <input type="radio" name="trans" value="100"  /></label>
<label>Fast: <input type="radio" name="trans" value="50" /></label>
<label>Instant: <input type="radio" name="trans" value="10" /></label>

</td>

        

<script type="text/javascript">
// Allow me a little script here to give action to my radio buttons.
// wrapped as a function to remove from global namespace
(function() {
    
    // onclick vs. onchange
    var radiobutton = document.getElementsByName("trans");

    for (var i=0, len=radiobutton.length; i<len; i++) {
        
        radiobutton[i].onchange = function() {
            knitspeed = this.value;
        };
    }
    
}());
</script>

<td>
<input type="button" value="KNIT NOW (Ctrl-m)" onclick="JSrun()"/> &nbsp; &nbsp;
<b>Output</b> &nbsp; &nbsp; 
Timing: <span id="JStiming"></span> s
</td>
<td rowspan=3 style="width:15%; background:lightblue;">
 Goal
 <div id="csLevelGoal"></div>
 Customer Comments 
 <div id="csComments"></div>
</td>
</tr>
<tr><td width="50%" style="padding:0px">
<textarea id="JSprogram" style="height:4in; width:99%; font-family: monospace; font-size: 16; font-weight: bold;" onkeyup="keyUp(event)">
// Knit a single stitch in your favorite color



</textarea>
</td>
<td rowspan=2 style="height:4in; width:50%; padding:1px">
<div id="canvas" width="500" height="700" data-url="<%= asset_path('stitch_semitrans.png') %>">
  <div class="csRow">
  </div>
</div>
</td>
</tr>
<tr><td width="100%" style="padding:0px">
<textarea id="JSoutput" value="Output will appear here in case of errors." style="height:1.5in; width:99%; font-family: monospace; font-size: 16;">
</textarea>
</td>
</tr>
</table>

<b>Note that this is dynamic code running locally on your machine.  If
you leave this page before copying and saving your work, it may
disappear.
</b>

<p>
<b>Quick reference to basic JavaScript commands</b>. Search online
for <a href="http://www.google.com/search?q=javascript+tutorial">tutorials</a>
<table>
<tr>
<td><b>Comment</b></td>
<td><pre>// this is a one-line comment
/* this comment could contain linebreaks */
</pre></td>
</tr>
<tr>
<td><b>Constant</b></td>
<td><tt><b>numbers</b> 12.3 <b>and strings</b> "hi", "hi".charAt(0) <b>is</b> "h"</tt></td>
</tr>
<tr>
<td><b>Variable</b></td>
<td><tt><b>start with a letter, then use letters, digits or _ (declared with</b> var<b>)</b></tt></td>
</tr>
<tr>
<td><b>Expression</b></td>
<td><tt><b>built from</b> +, -, *, /, pow(x,y), sqrt(), PI, E, log(), floor(), ceil(),</br>
random(), sin(), cos(), tan(), atan() <b>and constants, variables, functions</b></tt></td>
</tr>
<tr>
<td><b>Assignment</b></td>
<td><pre>v = expression;</pre></td>
</tr>
<tr>
<td><b>Block</b></td>
<td><pre>{   statement 1;
    ...
    statement n;
}</pre></td>
</tr>
<tr>
<td><b>Condition</b></td>
<td><tt>expression == expression <b>or</b> <=, <, >, >=, !=...<br>
<b>or</b> !cond, cond1 && cond2, cond1 || cond2</tt></td>
</tr>
<tr>
<td><b>if - else</b></td>
<td><pre>if (condition) block 1
else block 2                   // optional
</pre></td>
</tr>
<tr>
<td><b>for-loop</b></td>
<td><pre>for (var i=start; endcondition; i++)
    block
</pre></td>
</tr>
<tr>
<td><b>while-loop</b></td>
<td><pre>while (condition) 
    block
</pre></td>
</tr>
<tr>
<td><b>Function</b></td>
<td><pre>f = function(v1, ..., vn) {
    statement 1;
    ...
    return expression;
}
</pre></td>
</tr>
<tr>
<td><b>List</b> (array)</td>
<td><pre>a = [1,2,"hi"]
a[0] is 1, a.length is 3, a+[4] is [1,2,"hi",4]</pre></td>
</tr>
<tr>
<td><b>Object</b><br/>(hash tables)</td>
<td><pre>object = {attribute:expression, method:function}
a = {x:2, y:3, s:function(){return this.x+this.y}}
a.x is 3, a["x"] is 3, a.s() is 5
</pre></td>
</tr>
<tr>
<td><b>Output</b></td>
<td><pre>write("Hello"); writeln(" world");
</pre></td>
</tr>
</table>
</p>

<p>
This page is useful for experimenting with basic JavaScript and simple
algorithms (e.g. those covered in a discrete mathematics course). It
should work in any browser that has JavaScript enabled (including
smartphone browsers).
</p>


<textarea id="knitthree" style="display:none">
// Knit three stitches in different colors

stitchColor("red");
stitchColor("green");
stitchColor("blue");

</textarea>

<textarea id="knitcheckers" style="display:none">
// Knit a checkered pattern

for(a=0;a<11;a++) {
  for(b=0;b<5;b++) {
    stitchColor("green");
    stitchColor("red");
  }
  newRow();
  for(b=0;b<5;b++) {
    stitchColor("red");
    stitchColor("green");
  }
  newRow();
}

</textarea>

<textarea id="knitdiagonal" style="display:none">
// Knit a diagonal pattern

var i=0;
for(a=0;a<35;a++) {
  for(b=0;b<12;b++) {
    if(b<(i/3))
     stitchColor("green");
    else
     stitchColor("red");
  }
  newRow();
  i++;
}
</textarea>

<textarea id="knitstripes" style="display:none">
// Use a function to knit stripes

knitWholeLine = function(color) {
  for(a=0;a<10;a++) {
    stitchColor(color);
  }
  newRow();
}

for(i=0;i<7;i++){
knitWholeLine("blue");
knitWholeLine("red");
knitWholeLine("white");
}
</textarea>


<hr/>

<div align="center">
<a href="http://playcodestitch.com">Marleen Villeroy</a>, 
April, 2016,
<a href="http://tc.columbia.edu/">Teachers College, Columbia University</a>
</div>

</body>
</html>
