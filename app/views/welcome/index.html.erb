<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>KnitShop, a game for learning to code</title>
<script>
/*
<Add a description of the game here>
The code in this game is built upon a javascript interpreter by 
Peter Jipsen - referenced here by way of thanks.
Version of Jan 3, 2013, (c) Peter Jipsen http://www.chapman.edu/~jipsen
Latest version at http://www.chapman.edu/~jipsen/js
If you use it on a webpage, please send the URL to jipsen@chapman.edu
Mr. Jipsen's interpreter and this game are both 
free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License (at http://www.gnu.org/copyleft/gpl.html) 
for more details.
*/
// If I put this here, is it a global variable?
var KnitShopXPosition=0;
var KnitShopYPosition=0;
//var KnitShopStitchHeight=23;
//var KnitShopStitchWidth=38;
var KnitShopStitchHeight=18;
var KnitShopStitchWidth=30;
var stitches = [];
var alreadyDrawing;
var ksr,ksg,ksb;
var ksColor;
var knitspeed = 200;
var csCurrentLevel = 0;
var csLevelsCompleted = [];
var csLevels = [1.0,1.1];
var csMySolution = "";
var csHerSolution = "";
var csSnarkyRemarks = ["This is nice, but it's not what I ordered.",
	"Yuck, that looks like a baby knitted it, and then a dog ate it!",
	"This would be fine, if I had asked for something completely different.",
	"Lol, you're just getting started, aren't you?",
	"This isn't from the same PLANET as the scarf I ordered!"
];
var csCongrats = [
	"Oh, how lovely - thank you!!!",
	"I knew I came to the right place, this is wonderful!",
	"It's even prettier than I imagined!"
];
JSoutput = function(a) {
    var str = "["
    if (typeof(a)=="object" && a.length) {
        for (var i=0; i < a.length; i++) 
            if (typeof(a[i])=="object" && a[i].length) {
                str += (i==0?"":" ")+"["
                for (var j=0; j<a[i].length; j++) 
                    str += a[i][j]+(j==a[i].length-1?
                            "]"+(i==a.length-1?"]":",")+"\n":", ");
            } else str += a[i]+(i==a.length-1?"]":", ");
    } else str = a;
    return str;
}
/*write = function(str) {
    var outnode = document.getElementById("JSoutput");
    outnode.value += JSoutput(str);
}
writeln = function(str) {
    if (!str) str="";
    var outnode = document.getElementById("JSoutput");
    outnode.value += JSoutput(str)+"\n";
}*/
///////////////////////////////////////////
//  The Stitch Function                  //
//  argument: a color                    //
//  output: a single stitch on the       //
//     canvas in the given color.        //
///////////////////////////////////////////
/*stitch = function(str) {
    if (!str) str="white";
    var outnode = document.getElementById("JSoutput");
    outnode.value += JSoutput(str);
}*/
newRow = function() {
    /*if (!KnitShopYPosition) KnitShopYPosition=0;
    var outnode = document.getElementById("JSoutput");
    outnode.value += "\n";
    KnitShopYPosition += KnitShopStitchHeight;
    KnitShopXPosition = 0;
	var canvas = document.getElementById("canvas");
	var node = document.createElement("div");
	canvas.appendChild(node); */
	stitches.push("newrow");
	drawQueue();
}
setColor = function(r,g,b) {
   ksr = r;
   ksg = g;
   ksb = b;
 
   if(r != null && g == null && b == null) {
      //assume at this point that a string was given as first argument
      //if the argument begins with #, it's a hex color, otherwise it's text
     if(r.charAt(0) == '#') {
	ksColor=r;
	return;
     }
     switch (r) {
        case "purple":
	   ksColor="#A020F0";
	   ksr=160;
	   ksg=32;
	   ksb=240;
	   break;
	case "black":
	   ksColor="#000000";
           ksr=0;
	   ksg=0;
	   ksb=0;
           break;
        case "white":
	   ksColor="#FFFFFF";
           ksr=255;
	   ksg=255;
	   ksb=255;
           break;    
        case "red":
	   ksColor="#FF0000";
           ksr=255;
	   ksg=0;
	   ksb=0;
           break;
        case "green":
	   ksColor="#00FF00";
           ksr=0;
	   ksg=255;
	   ksb=0;
           break;
        case "blue":
	   ksColor="#0000FF";
           ksr=0;
	   ksg=0;
	   ksb=255;
           break;
        case "yellow":
	   ksColor="#FFFF00";
	   ksr=255;
	   ksg=255;
	   ksb=0;
	   break;
	case "orange":
	   ksColor="#FFA500";
	   ksr=255;
	   ksg=165;
	   ksb=0;
	   break;
	default:
           ksColor="#ffffff";
	   //stitchRGB(0,0,0);
     }
   }
}
stitch = function(x) {
   if(x == null) x=1;
   if(ksColor == null) ksColor="#000000";
   for(stitchindex = 0; stitchindex<x; stitchindex++){
	stitches.push(ksColor);
   }
   drawQueue();
}

blankStitch = function(x) {
   if(x == null) x=1;
   for(stitchindex = 0; stitchindex<x; stitchindex++){
        stitches.push("blankstitch");
   }
   drawQueue();
}


//TODO: remove the stitchColor function
stitchColor = function(str) {
    //KSWait(500);
    if(!str) str="black";
    switch (str) {
	case "black":
	   stitchRGB(0,0,0);
	   break;
	case "white":
	   stitchRGB(255,255,255);
	   break;    
	case "red":
	   stitchRGB(255,0,0);
	   break;
	case "green":
	   stitchRGB(0,255,0);
	   break;
	case "blue":
	   stitchRGB(0,0,255);
	   break;
	default:
	   stitchRGB(0,0,0);
    }
}
//TODO: remove stitchRGB function, and global variables KnitShopX*, KnitShopY*
function stitchRGB(r,g,b) {
    if (!KnitShopXPosition) KnitShopXPosition=0;
    if (!KnitShopYPosition) KnitShopYPosition=0;
    //ksr=r;
    //ksg=g;
    //ksb=b;
    //var ctx=document.getElementById("canvas").getContext('2d'); 
    //ctx.fillStyle = 'rgba('+ksr+','+ksg+','+ksb+',1)';
    //ctx.fillRect(KnitShopXPosition,KnitShopYPosition,KnitShopStitchWidth,KnitShopStitchHeight);
    //requestAnimationFrame(draw);
	//*** setTimeout just doesn't work because it's asynchronous
    //setTimeout(function(){draw() }, 250);
    //KSWait(250);
	
	// the stitches array will hold all the stitches as RGB strings, in descending chron order.
    stitches.push(""+r+","+g+","+b+"");
	
	drawQueue();
    KnitShopXPosition += KnitShopStitchWidth;
    
    return true;
}
function drawQueue() {
	if(alreadyDrawing) {
		return;
	}
	alreadyDrawing = true;
	
	setTimeout(function drawStitches() {
		var drawColor = stitches.shift();
		if(!drawColor) {
			alreadyDrawing = false;
			//we've completed drawing the whole queue, now test for level completion
                        var lvlCompleted = csTestLevelCompleted();
		        if(lvlCompleted) {
			   if( $('#current_user').length > 0 ) {
				//save the solution under this user's collection of solutions
				var solutionString = escape(document.getElementById("JSprogram").value);
				var csrfToken = $('#csrf-token').val();
		           //we're going to do this the AJAX way so our game
			   //remains a single-page application.
				$.ajax("/solutions", {type: "POST", async: true, data: {content: solutionString, level: csCurrentLevel }})
			   }
		           csAdvanceLevel();
		        }
		        if(!lvlCompleted) {
		           // output something in the hint field
			   $( "#dialogFail" ).dialog( "open" ); 
			   var ran = Math.random();
			   ran = Math.floor(ran*100 % csSnarkyRemarks.length);
			   $( "#csComments" ).html(csSnarkyRemarks[ran]);
		        }
                        
			return;
		}
		//If the previous if didn't catch, then we're still drawing the queue elements
		if(drawColor == "newrow" || drawColor == "blankstitch") {
			if(drawColor == "newrow") drawNewRow();
			if(drawColor == "blankstitch") drawBlankStitch();
		}
		else {
			draw(drawColor);
		}
		setTimeout(drawStitches, knitspeed);
	},knitspeed); //end of first setTimeout call
}
function draw(rgb) {
    //var ctx=document.getElementById("canvas").getContext('2d'); 
    //ctx.fillStyle = 'rgba('+ksr+','+ksg+','+ksb+',1)';
    //ctx.fillRect(KnitShopXPosition,KnitShopYPosition,KnitShopStitchWidth,KnitShopStitchHeight);
    //window.requestAnimationFrame(draw);
	
	var easel = document.getElementById("canvas").lastChild;
	//at this point, easel is the last div under canvas.
	var stitchnode = document.createElement("img");
	//stitchnode.setAttribute("src", "//public/images/stitch_semitrans.png");
        stitchnode.setAttribute("src", " <%= asset_path('stitch_semitrans.png')  %> "); //$(canvas).data("data-url");
	stitchnode.setAttribute("class","csStitch");
	stitchnode.setAttribute("style", "vertical-align:top; width:"+KnitShopStitchWidth+"px; height:"+KnitShopStitchHeight+"px; background-color:"+rgb+";");
	//stitchnode.setAttribute("height", "23");
	//stitchnode.setAttribute("width","38");
	easel.appendChild(stitchnode);
	
	//desired resulting node: <img src="stitch.jpg" height="40" width="40" />
}
function drawNewRow() {
	var canvas = document.getElementById("canvas");
	var node = document.createElement("div");
	node.setAttribute("class","csRow");
	canvas.appendChild(node);
}
function drawBlankStitch() {
	var easel = document.getElementById("canvas").lastChild;
	var stitchnode = document.createElement("img");
	stitchnode.setAttribute("src", " <%= asset_path('stitch_blank.png')  %> ");
	stitchnode.setAttribute("style", "vertical-align:top; width:"+KnitShopStitchWidth+"px; height:"+KnitShopStitchHeight+"px;");
	easel.appendChild(stitchnode);
}

dummywait = function() {
  //do nothing.
  
}
//This function unfortunately didn't allow for a repaint between actions, so it's not useful
KSWait = function(KnitShopms){
//TODO: make KnitShopms variable depending on a configurable parameter.
    if(!KnitShopms || KnitShopms>10000) KnitShopms=250;
    var start = new Date().getTime();
    var current = new Date().getTime();
    var end = start+KnitShopms;
    while(current < end) {
       current = new Date().getTime();
    }
}
//TODO: define the size of the canvas, or query it, and add as numbers below
clearCanvas = function() {
    //var ctx=document.getElementById("canvas").getContext('2d');
    //ctx.clearRect(0,0,500,700);
	var canvas = document.getElementById("canvas");
	canvas.innerHTML = "<img class='csKnittingNeedle' src='<%= asset_path('woodknitneedle.png') %>' style='width:100%'><div class='csRow'></div>";
}
JSrun = function() {
    //Easter Egg
    if(document.getElementById("JSprogram").value.trim() == "MEOW") {
	document.getElementById("csCheats").style.display = "block";
        ga('set', 'page', '/csMEOW');
        ga('send', 'pageview');
	return;
    }
    // Notify Google Analytics of user activity each time the user hits "GO"
    // Find definition of this function in codeStitch.js

    //Google says do not create new trackers in Single Page Apps, so this is commented out.
    //ga('create', 'UA-76776475-1', 'auto');
    var csGAPageName = "/csLVL"+csCurrentLevel;
    ga('set', 'page', csGAPageName);
    ga('send', 'pageview');
 

    var str;
    alreadyDrawing = false;
    KnitShopXPosition = 0;
    KnitShopYPosition = 0;
    //ksr=0;ksg=0;ksb=0;
    clearCanvas();
    var outnode = document.getElementById("JSoutput");
    outnode.value = "";
    //d = new Date().getTime();
    try {
        with (Math) {
	    
            str = JSoutput(eval(document.getElementById("JSprogram").value));
        }
    } catch(e) {
        str = e.name+" at line "+(e.lineNumber-56)+": "+e.message;
    }
    //var tnode = document.getElementById("JStiming");
    //tnode.innerHTML = ""+(new Date().getTime()-d)/1000;
    if (str != undefined) {outnode.value += str;}
}
csTestLevelCompleted = function() {
   //TODO: think of a clever, visual-based test for level completion.
   /*
   Begin brainstorming rant. each row is a div class=csRow, so counting
   rows is a good start. $(".csRow").length will count them up, and
   $( ".csRow").each(function(index) { console.log("Row "+index+" has "+this.children().length+" children.");});
   */
   console.log("CSDEBUG: There are currently "+ $( ".csRow" ).length + " rows.");
   $( ".csRow").each(function(index) { console.log("CSDEBUG:    Row "+index+" has "+this.children.length+" children.");});
   switch (csCurrentLevel) {
	case 0:
	   var csRows = $(".csRow").length;
	   var csRowLength = 0;
	   $(".csRow").each(function(index) {csRowLength = this.children.length;});
	   //check that result is 1x1
	   if ( csRows == 1 && csRowLength == 1) {
		return true;
	   }
	   break;
	case 1:
	   var csRows = $(".csRow").length;
           var csRowLength = 0;
           $(".csRow").each(function(index) {csRowLength = this.children.length;});
           //check that result is 1x3
	   if ( csRows == 1 && csRowLength == 3) {
                //TODO: don't forget to check the color value!!!
		var csColorArray = "";
		$(".csStitch").each(function(index) {
			console.log(index+": "+this.style["background-color"]);
		   	csColorArray += this.style["background-color"];
			csColorArray +="-";
		});
		if (csColorArray == "rgb(255, 0, 0)-rgb(0, 255, 0)-rgb(0, 0, 255)-") {
		   return true;
		}
           }
	   break;
	case 2:
	   var csRows = $(".csRow").length;
	   var csRowLength = 0;
	   $(".csRow").each(function(index) {csRowLength = this.children.length;});
	   //check that the result is 1x8
	   if ( csRows == 1 && csRowLength == 8) {
		//TODO: don't forget to check the color value!!!
		var returnval = true;
		$(".csStitch").each(function(index) {
		   if (this.style["background-color"] != "rgb(160, 32, 240)") returnval= false;
		   
		});
		return returnval;
	   }
	   break;
	case 3:
	   var csRows = $(".csRow").length;
	   var csRowLength = 0;
	   var returnval = true;
	   // Check that the result is 2x8
	   if(csRows < 2) return false;
	   $(".csRow").each(function(index) {
		if(this.children.length != 8 && index < 2) returnval=false;
		if(this.children.length > 0 && index >=2) returnval=false;
	   });
	   // Check for red stitches only
                
           $(".csStitch").each(function(index) {
              if (this.style["background-color"] != "rgb(255, 0, 0)") returnval= false;
                  
           });
           return returnval;

	   break;
	case 4:
	   var csRows = $(".csRow").length;
           var csRowLength = 0;
           var returnval = true;
           // Check that the result is 2x8
	   if(csRows < 2) return false;
           $(".csRow").each(function(index) {
                if(this.children.length != 8 && index < 2) returnval=false;
		if(this.children.length > 0 && index >=2) returnval=false;
           });
           // Check for alternating stitch colors 
           var colorA, colorB;
           $(".csStitch").each(function(index) {
	      var currentStitchColor = this.style["background-color"];
	      if (index == 0) colorA = currentStitchColor;
	      if (index < 4 && currentStitchColor != colorA) returnval = false;
	      if (index > 11 && currentStitchColor != colorA) returnval = false;
	      if (index == 4) colorB = currentStitchColor;
	      if (index > 4 && index <= 11 && currentStitchColor != colorB) returnval = false;
              if (colorA == colorB) returnval = false;
           });
           return returnval;
           break;
	case 5:
           var csRows = $(".csRow").length;
           var csRowLength = 0;
           var returnval = true;
           // Check that the result is 4x8
	   if(csRows < 4) return false;
           $(".csRow").each(function(index) {
                if(this.children.length != 8 && index < 4) returnval=false;
		if(this.children.length > 0 && index >=4) returnval=false;
           });
           // Check for alternating stitch colors 
           var colorA, colorB, colorC, colorD;
           $(".csStitch").each(function(index) {
              var currentStitchColor = this.style["background-color"];
              if (index == 0) colorA = currentStitchColor;
              if (index < 8 && currentStitchColor != colorA) returnval = false;
              if (index == 8) colorB = currentStitchColor;
              if (index > 8 && index < 16 && currentStitchColor != colorB) returnval = false;
              if (index == 16) colorC = currentStitchColor;
              if (index > 16 && index < 24 && currentStitchColor != colorC) returnval = false;
              if (index == 24) colorD = currentStitchColor;
              if (index > 24 && currentStitchColor != colorD) returnval = false;
	   });
           if (colorA == colorB || colorA == colorC || colorA == colorD || colorB == colorC || colorB == colorD || colorC == colorD) returnval = false;

           return returnval;
           break;
	case 6:
	case 7:
	   var csRows = $(".csRow").length;
       var csRowLength = 0;
       var returnval = true;
           // Check that the result is 3x3
       if(csRows < 3) return false;
       $(".csRow").each(function(index) {
                if(this.children.length != 3 && index < 3) returnval=false;
		if(this.children.length > 0 && index >=3) returnval=false;
           });
           // Check for alternating stitch colors 
           var colorA, colorB;
           $(".csStitch").each(function(index) {
              var currentStitchColor = this.style["background-color"];
	      if (index == 0) colorA = currentStitchColor;
	      if (index % 2 == 0 && currentStitchColor != colorA) returnval = false;
	      if (index ==1) colorB = currentStitchColor; 
	      if (index % 2 == 1 && currentStitchColor != colorB) returnval = false;
	   });
	   if(colorA != "rgb(138, 43, 226)" || colorB != "rgb(212, 175, 55)") returnval = false;
	   return returnval;
	   break;
	case 8:
	   var csRows = $(".csRow").length;
       var csRowLength = 0;
       var returnval = true;
           // Check that the result is 4x4
       if(csRows < 4) return false;
       $(".csRow").each(function(index) {
                if(this.children.length != 4 && index < 4) returnval=false;
		if(this.children.length > 0 && index >=4) returnval=false;
       });
           // Check that all stitches are pink 
       
       $(".csStitch").each(function(index) {
          var currentStitchColor = this.style["background-color"];
	      if (currentStitchColor != "rgb(255, 192, 203)") returnval = false;
	   });
	   
	   return returnval;
	   break;
	case 9:
	   var csRows = $(".csRow").length;
       var csRowLength = 0;
       var returnval = true;
           // Check that the result is 4x8
       if(csRows < 4) return false;
       $(".csRow").each(function(index) {
                if(this.children.length != 8 && index < 4) returnval=false;
		if(this.children.length > 0 && index >=4) returnval=false;
       });
           // Check that all stitches are pink 
       $(".csStitch").each(function(index) {
          var currentStitchColor = this.style["background-color"];
	      if (currentStitchColor != "rgb(255, 192, 203)") returnval = false;
	   });
	   return returnval;
	   break;
	
	//Sandbox is Level 999
	case 10:
           var csRows = $(".csRow").length;
           var csRowLength = 0;
           var returnval = true;
	   var blueStitches1 = 0;
	   var blueStitches2 = 0;
	   var whiteStitch = false;
           // Check that the result is 4x4
           if(csRows < 4) return false;
           $(".csRow").each(function(index) {
                if(this.children.length != 4 && index < 4) returnval=false;
		if(this.children.length > 0 && index >=4) returnval=false;
           });
           // Check for the diagonal pattern 
           var colorA = "rgb(0, 0, 255)";
	   var colorB = "rgb(255, 255, 255)";
	   $(".csStitch").each(function(index) {
              var currentStitchColor = this.style["background-color"];
	      if (index == 4 || index == 8 || index == 12) {
		//was the previous line conform to the diagonal?
	        if(blueStitches2 <= blueStitches1 && blueStitches2 > 0) return false;
                //get ready for the new line
		blueStitches1 = blueStitches2;
	        blueStitches2 = 0;
		whiteStitch = false;
		
	      }
              if(whiteStitch && currentStitchColor != colorB) return false;
              if(currentStitchColor == colorA && !whiteStitch) blueStitches2 += 1;
              if(currentStitchColor == colorB) whiteStitch = true;

           });
           return true;

	   break;

	//sandbox is level 999
	case 999:
	    return true;
   }
   return false;
}
csAdvanceLevel = function() {
   // move current level to the next one given a list of all levels
   csLevelsCompleted[csLevelsCompleted.length] = csLevels[csCurrentLevel];
   $(" #csComments ").html("");
   if(csCurrentLevel >= getCookie("csLvl")) setCookie("csLvl", csCurrentLevel+1, 7300);

   switch (csCurrentLevel) {
	case 0:
	   //$("#opener11").prop('disabled', false);
	   csMySolution = document.getElementById("JSprogram").value;
	   csHerSolution = "";
	   $("#opener11").button("enable");
	   $("#opener11").click();
           if( $("#current_user" ).length > 0) {
		//AJAX call to retrieve compare solution
		//Note that calling /solutions will return an html formatted
                //representation of the solution, but calling /solutions.json
		//will return an object of type Solution.
		$.ajax({url: "/solutions.json", async: true, data: {level: csCurrentLevel-1 }, datatype: "json"}).done( 
			function( data ) {$("#dialogCompareRight").html("<h3>"+data.first_name +"\'s Solution:</h3><textarea style=\"width: 100%; height: 4in\">"+unescape(data.content)+"</textarea>" + 

           "<p>And now for some other fun stuff: <ul><li>" + 
                  "Gender: "+ data.gender + "</li><li>" +
                  "Age range: " + data.age    + "</li></ul></p>")}
		);

		//csMySolution = document.getElementById("JSprogram").value;
		$("#dialogCompareLeft").html("<h3>Your Solution:</h3><textarea style=\"width: 100%; height: 4in\">"+csMySolution+"</textarea>");
		$("#dialogCOMPARE").dialog( "open" );
	   }
	   break;
	case 1:
	   //$("#opener12").prop('disabled', false);
	   $("#opener12").button("enable");
	   $("#opener12").click();
	   if( $("#current_user" ).length > 0) {
                $("#dialogCOMPARE").dialog( "open" );
           }
           break;
	case 2:
	   $("#opener13").button("enable");
	   $("#opener13").click();
	   if( $("#current_user" ).length > 0) {
                $("#dialogCOMPARE").dialog( "open" );
           }
           break;
        case 3:
           $("#opener14").button("enable");
           $("#opener14").click();
           break;
	case 4:
	   $("#opener15").button("enable");
	   $("#opener15").click();
	   break;
	case 5:
	   $("#opener20").button("enable");
	   $("#opener20").click();
	   break;
	case 6:
	   $("#opener21").button("enable");
	   $("#opener21").click();
	   break;
	case 7:
	   $("#opener22").button("enable");
	   $("#opener22").click();
	   break;
	case 8:
	   $("#opener23").button("enable");
	   $("#opener23").click();
	   break;
	case 9:
	   $("#opener24").button("enable");
           $("#opener24").click();
	   break;
	case 10:
	   //congratulate user on winning the game?
	   $( "#dialogEND" ).dialog( "open" );
	   break;
	
	//Sandbox Level
	case 999:
	    //do nothing for now
	    break;
   }
   //csCurrentLevel += 1;
   
}
JSselect = function() {
    var id = document.getElementById("JSexamples").value;
    var str = document.getElementById(id).value;
    document.getElementById("JSprogram").value = str;
    JSrun();
}
keyUp = function(event){
  if (event.which==77 && event.ctrlKey) JSrun();
}
/*
//General TODO's
- Look up the pixel width on an ipad in portrait mode and make the <tr> containing the code and output
  add up to that width. No messing with percentages, make this explicit.
- must implement game flow and level logic.
- come up with at least 12 levels of incremental difficulty.
- find some way to animate the knitting instead of immediately showing the result.
*/

var getCurrentLevelButton = function(levelIndex) {
        if(levelIndex <= 5 ) {
           return  "#opener1"+btnIndex;
        }
        if(levelIndex > 5) {
           var lvlname = levelIndex -6;
           return "#opener2"+lvlname ;
        }

}
</script>
<script>
  //This script will run once upon loading the page
  //The following is JQuery UI scripting for User Interface effects
  $(function() {
    var enablebutton;
    $( ".csDialog" ).dialog({
      autoOpen: false,
      show: {
        effect: "blind",
        duration: 1000
      },
      hide: {
        effect: "explode",
        duration: 1000
      },
	  buttons: [ {
		text: "Okay",
		click: function() { $(this).dialog("close");}
	   }
	  ],
      width: 500,
    });
    $( "#dialogCOMPARE" ).dialog({
      autoOpen: false,
      show: {
        effect: "blind",
        duration: 1000
      },
      hide: {
        effect: "explode",
        duration: 1000
      },
          buttons: [ {
                text: "Okay",
                click: function() { $(this).dialog("close");}
           }
          ],
      width: 1000,
      height: 700,
    });

    $( ".csDiaBtn" ).button();
    for (btnIndex=0; btnIndex <= getCookie("csLvl"); btnIndex++) {
	enablebutton = getCurrentLevelButton(btnIndex);
	$( enablebutton).button("enable");
	csCurrentLevel = btnIndex;
    }
    
    $( "#radioset" ).buttonset();
    $( "#knitnowbutton" ).button();
    $( "#opener10" ).click(function() {
      csCurrentLevel = 0;
      
      $( "#csLevelGoal").html("<p>Make a single stitch in any color</p>Hint:<br/><div class='csCode'>setColor(\"purple\");<br/>stitch();</div>");
      $( "#dialog10" ).dialog( "open" );
    });
    $( "#opener11" ).click(function() {
      csCurrentLevel = 1;
      $( "#csLevelGoal").html("<p>Make three stitches: Red, Green, then Blue.</p>Hint:<br/><div class='csCode'>setColor(\"red\");<br/>stitch();<br/>setColor(\"green\");<br/>stitch();<br/>...</div>");
      $( "#dialog11" ).dialog( "open" );
    });
    $( "#opener12" ).click(function() {
      $( "#csLevelGoal").html("<p>Stitch a line of 8 purple stitches</p>Hint:<br/><div class='csCode'>setColor(\"purple\");<br/>stitch(8);</div>");
      csCurrentLevel = 2;
      $( "#dialog12" ).dialog( "open" );
    });
    $( "#opener13" ).click(function() {
      $( "#csLevelGoal").html("<p>Knit two red lines, each 8 stitches long.</p>Hint:<br/><div class='csCode'>setColor(\"red\");<br/>stitch(8);<br/>newRow();<br/>stitch(8);</div>");
      csCurrentLevel = 3;
      $( "#dialog13" ).dialog( "open" );
    });
    $( "#opener14" ).click(function() {
      $( "#csLevelGoal").html("<p>Knit two lines, one with 4 white stitches then 4 red stitches, the second with 4 red stitches then 4 white stitches.</p>Hint:<br/><div class='csCode'>setColor(\"red\");<br/>stitch(4);<br/>//Switch Color and stitch 4 more<br/>...<br/>newRow();<br/>stitch(4);<br/>//Switch colors again and stitch 4 more<br/>...</div>");
      csCurrentLevel = 4;
      $( "#dialog14" ).dialog( "open" );
    });
    $( "#opener15" ).click(function() {
      $( "#csLevelGoal").html("<p>Knit four lines, 8 stitches each, in 4 different colors.</p>Hint:<br/><div class='csCode'>setColor(\"#1fbc23\");<br/>...<br/>...<br/>...</div>");
      csCurrentLevel = 5;
      $( "#dialog15" ).dialog( "open" );
    });
    $( "#opener20" ).click(function() {
      $( "#csLevelGoal").html("<p>Knit 3 lines, 3 stitches each, with alternating violet and gold colors.</p>Hint:<br/><div class='csCode'>setColor(\"#8A2BE2\");<br/>stitch();<br/>setColor(\"#D4AF37\");<br/>stitch();<br/>...</div>");
      csCurrentLevel = 6;
      $( "#dialog20" ).dialog( "open" );
    });
    $( "#opener21" ).click(function() {
      $( "#csLevelGoal").html("<p>Knit 3 lines, 3 stitches each, with alternating violet and gold colors. User variables to store the color names.</p>Hint:<br/><div class='csCode'>var violet = \"#8A2BE2\";<br/>var gold = \"#D4AF37\";<br/>setColor(violet);<br/>stitch();<br/>setColor(gold);<br/>stitch();<br/>...</div>");
      csCurrentLevel = 7;
      $( "#dialog21" ).dialog( "open" );
    });
    $( "#opener22" ).click(function() {
      $( "#csLevelGoal").html("<p>Knit 4 lines, 4 stitches wide, in pink. Use variables to store the color and the width of the lines.</p>Hint:<br/><div class='csCode'>var pink = \"#FFC0CB\";<br/>var lineWidth = 4;<br/>setColor(pink);<br/>stitch(lineWidth);<br/>...<br/></div>");
      csCurrentLevel = 8;
      $( "#dialog22" ).dialog( "open" );
    });
    $( "#opener23" ).click(function() {
      $( "#csLevelGoal").html("<p>Knit 4 lines, 8 stitches wide, in pink. Use variables to store the color and the width of the lines.</p>Hint:<br/><div class='csCode'>var pink = \"#FFC0CB\";<br/>var lineWidth = 8;<br/>setColor(pink);<br/>stitch(lineWidth);<br/>...<br/></div>");
      csCurrentLevel = 9;
      $( "#dialog23" ).dialog( "open" );
    });
    $( "#opener24" ).click(function() {
      $( "#csLevelGoal").html("<p>Knit 4 lines, 4 stitches wide, in two colors with a diagonal pattern. Use one variable to store the total line width, and another variable to store the number of stitches to be blue on each line.</p>Hint:<br/><div class='csCode'>var lineWidth = 4;<br/>var blueStitches = 1;<br/>setColor(\"blue\");<br/>stitch(blueStitches);<br/>setColor(\"white\");<br/>stitch(lineWidth - blueStitches);<br/>newRow();<br/>blueStitches = blueStitches + 1; //now blueStitches is equal to 2<br/>...<br/></div>");
      csCurrentLevel = 10;
      $( "#dialog24" ).dialog( "open" );
    });

    
    $( "#openerSBX" ).click(function() {
      $( "#csLevelGoal").html("<p>Sandbox - open play<br/> What will <b>you</b> make?</p>");
      csCurrentLevel = 999;
    });

    $('#noIndColor').colorpicker({
	displayIndicator: false,
	defaultPalette: 'web',
	color: '#17b13a'
    });
    $( enablebutton ).click();
  });
  </script>
<style>td {background:white; vertical-align:top; border:1px solid black; padding:2px 10px}
pre {margin:0}
table {border-collapse:collapse; table-layout:fixed}
body {background: #f5da35; font-family:Arial}
textarea {font-family:Lucida console}
</style>
</head>
<body onload="JSrun()"><!-- onpaste="return false;"-->
<div class="csDialog" id="dialog10" title="Level 1.0: Your Very Own Knitting Shop" style="width:400">
  <p>Congratulations on founding your very own knitting shop. You've got a store all set up with a knitting robot to make scarves, sweaters, socks, and anything else you can think of: you just need to learn to program the robot! </p>
<p>We'll start with the basics, and before you know it your knitting shop will be open for business. First things first, let's learn how to make a single stitch in a color of your choice. The way codeStitch works is that you type in commands and hit the go button, then the robot will create a product given the commands you provide. Each knit stitch will look something like this:</p>
  <img src="<%= asset_path('stitch_semitrans.png') %>"  />
  <p>You can make the robot do this by using two simple commands. The first one is <span class="csCode">setColor();</span> You can put the name
     of a color in between the '()' and the robot will get ready to knit in that color, like this: <span class="csCode">setColor("red");</span> By the way, those quotation marks are importnat, so don't leave them out!</p>
  <p>After you've chosen a color, you need to tell the robot to make a stitch. Later, we'll combine lots of stitches to make scarves in elaborate colors and patterns, but for now let's just start with one stitch. The command is easy to remember: <span class="csCode">stitch();</span> Go ahead and try it out, and don't forget to end each line with a semi-colon (it looks like this- ; )
</div>
<div class="csDialog" id="dialog11" title="Level 1.1: Stitching in Multi-Color">
  <p>Great Job!</p><p>Now that you've made one stitch, let's build on that and tell the robot to make three stitches, each one in a different color. To complete the level, make a Red, a Green, and a Blue stitch, like this:</p>
  <img src="<%= asset_path('level1.1_goal.png') %>" />
  <p>To accomplish it, you'll just do the same thing as before, but three times. Set a different color before making each stitch.</p>
  <p>Notice that after you finish each level, your work from the previous level stays on the notepad. You can erase it, or build on top of that work to accomplish the next level. There are also reminders and hints to the left of the notepad to help you reach your goal.</p>
</div>
<div class="csDialog" id="dialog12" title="Level 1.2: Stitch a whole line">
  <p>This is easy, right? And it's about to get even easier, because coding is all about reducing mundane repetition and making the robot work for you, instead of the other way around. Now, once we've set a color, we can make the robot knit many stitches at once by adding an 'argument' to the stitch command, like this: <span class="csCode">stitch(3);</span> which will knit three stitches instead of just one.</p>
  <p>Now you try it. To complete this level, knit 8 purple stitches in a line, like this:</p>
  <img src="<%= asset_path('level1.2_goal.png') %>"  />
 
</div>
<div class="csDialog" id="dialog13" title="Level 1.3: Getting Two Dimensional">
  <p>I know what you're thinking: "This single-line knitting is uninspired." Well, it's time to spice it up then, and introduce a new command: <span class="csCode">newRow();</span> </p>
  <p>This will make the robot jump to the next line, so you can knit something a little bigger. Use this new function to knit two rows of red stitches. Each row should be 8 stitches long, like this:</p>
  <img src="<%= asset_path('level1.3_goal.png') %>"  />
  <p>Notice that in programming, there are often many ways to successfully achieve a goal. You could write <span class="csCode">stitch();</span> 8 times in a row, or write <span class="csCode">stitch(8);</span> just once, and the result would be the same. The difference is a little bit an expression of yourself and a little bit a chance to save you time when writing code. We'll come back to talk about different ways to solve a problem later.</p>  
</div>
<div class="csDialog" id="dialog14" title="Level 1.4: Let's make a pattern">
  <p>Remember that you can switch colors anytime by adding <span class="csCode">setColor(...);</span> into your program. Let's use that ability to make a pattern.</p>
  <p>Knit two lines, the first row with 4 white stitches then 4 red ones, and the second row with 4 red stitches then 4 white ones. On second thought, free your mind and use any two colors you like, just make sure the pattern comes out 4-and-4 on each line, alternating which color comes first. The result should look like this:</p>
  <img src="<%= asset_path('level1.4_goal.png') %>"  />
  <p>You may have noticed that the robot only recognizes a handful of colors, and it uses white whenever it's not sure. In the next level, we're going to show you how to use any color you want!</p>
</div>
<div class="csDialog" id="dialog15" title="Level 1.5: Millions of Colors">
  <p>Have you been feeling inhibited in your artistic expression by your robot's limited color range? Worry no more, because now it's time to learn how you can make your robot knit in any color you can imagine. Instead of giving a color name to the <span class="csCode">setColor();</span> command, you can use a so-called 'hexidecimal color code' (just 'hex' for short), like this: <span class="csCode">setColor(#D4AF37);</span></p>
  <p>That one will make a nice Gold color :).</p>
  <p>To complete this level, knit four lines of 8 stitches each, and use a different color for each line. The result should look something like this:</p>
  <img src="<%= asset_path('level1.5_goal.png') %>"  />
</div>
<div class="csDialog" id="dialog20" title="Level 2.0: Open for Business!">
  <p>Now you know everything you need to open your Knitting Shop! As customers come in with different requests, we'll teach you new tricks to make your programs easier to write, more re-usable in later levels, and the scarves more complex and beautiful.</p>
  <p>Oh, here's your very first customer now!</p>
  <img src="<%= asset_path('level2.0_avatar.png') %>" />
  <p>Patty: "Hi, what a cool shop you have here! Can you make me a scarf, too? Just a small one, 3 stitches wide and 3 rows long, but can you checker it for me? My favorite colors are Violet and Gold, like this:</p>
  <img src="<%= asset_path('level2.0_goal.png') %>"  />
  <p>Hint: you can use these hex codes for Patty's favorite colors: Violet "#8A2BE2", Gold "#D4AF37" </p>
</div>
<div class="csDialog" id="dialog21" title="Level 2.1: Introducing Variables">
  <p>The code we've used so far to customize the knitting colors is kind of difficult to read. It's easy to forget which hex code stands for which color, and that can make the code confusing to look at and work with, right?. Wouldn't it be easier if you could assign your own name to each hex code for easier use?</p>
  <p>The good news is: you can!</p>
  <p>By using a tool called variables, you can save any hex code under a name you want. We can define a variable and assign it a hex code like this: <span class="csCode">var myColor = "#3D8F25";</span> and then use it in the code like this: <span class="csCode">setColor(myColor);</span></p>
  <p>Say, there's nobody in the shop anyway; how about you do Patty's scarf again, but this time make the code more readable by declaring two variables, violet and gold, in the beginning and using those names instead of the hex codes!</p>
  <img src="<%= asset_path('level2.0_goal.png') %>"  />
  <p>Hint: when you use a variable instead of a hex code, leave away the quotation marks (") or you'll get something unexpected.</p>
</div>
<div class="csDialog" id="dialog22" title="Level 2.2: More Variables">
  <p>Variables serve a lot of purposes in programming. You can save different things in a variable, like words/text (we did that in level 2.1), numbers, and many other things as well. When you save text in a variable, you use quotations in the declaration command; when you save a number, the quotes aren't necessary:
     <br/><span class="csCode">var myFavoriteColor = "#FFC0CB";<br/>var lineWidth = 4;</span></p>
  <p>As you've probably noticed, variable names cannot contain spaces, so we use capitals to make them more readable. Also, the variable names are case sensitive, so if you don't type them exactly the way they look in the declaration, your robot won't recognize or use them properly.</p>
  <p>Hey, here comes your next customer. Maybe you'll get a chance to use variables again now!</p>
  <img src="<%= asset_path('level2.2_avatar.png') %>" />
  <p>Susan: "Hello there. Wow, a fully automated knitting shop, what a great idea! I'd like a pink square, 4x4, can you do that?</p>
  <img src="<%= asset_path('level2.2_goal.png') %>"  />
  <p>Hint: Save the hex code for pink (#FFC0CB) in a variable, and save the number of stitches in a line, too.</p>
</div>
<div class="csDialog" id="dialog23" title="Level 2.3: Re-using Variables">
  <p>You may be looking at your code for Susan's square and wondering why using variables is necessary. After all, instead of writing <span class="csCode"><br/>var lineWidth = 4;<br/>stitch(lineWidth);<br/></span> you could have just written <span class="csCode">stitch(4);</span> right?</p>
  <p>Well, there are a couple of reasons we use variables even though they might make the code a little bigger. One reason is <b>re-usability</b>. Look at your solution to the last level again. If we wanted to make the same scarf, but with 8 stitches instead of 4 per line, we could use the same code, and only replace a single number in the declaration command.</p>
  <p>What do you know, here comes Susan again!</p>
  <img src="<%= asset_path('level2.2_avatar.png') %>" />
  <p>Susan: "Hi again - I just love that pink square you made for me! I couldn't resist the urge to come back and order another one. Can you make it just a bit different this time? I'd like it to be 4 lines with 8 stitches each, and of course in that lovely pink again, like this:</p>
  <img src="<%= asset_path('level2.3_goal.png') %>"  />
  <p>Hint: Take advantage of your nice, re-usable code, and quickly fulfill Susan's request by changing the definition of lineWidth.</p>
</div>
<div class="csDialog" id="dialog24" title="Level 2.4: Variables can do math">
  <p>Let's take the usefulness of variables to another level - this time by using them to do some math. After you have declared a variable, you can use it just like you would any other number or word in your program. For example, these snippets of code do the same thing:<span class="csCode"><br/>var lineWidth = 4;<br/>stitch(lineWidth + 2);  // knits 6 stitches<br/><br/>var justTwo = 2;<br/>stitch(lineWidth + justTwo);  //knits 6 stitches, too<br/><br/>stitch(6);    //also knits 6 stitches<br/></span></p>
  <p>You can also change the value of a variable after declaring it. Consider this line:<span class="csCode"><br/>lineWidth = lineWidth + 2;  // increases the value by 2 <br/></span>After that line of code, the variable <span class="csCode">lineWidth</span> will have a new value for the rest of the program, namely its previous value plus 2. Starting to get the hang of it?.</p>
  <p>I think you're going to get a chance to practice right now:</p>
  <img src="<%= asset_path('level2.4_avatar.png') %>" />
  <p>Roberta: "I heard about your shop and just had to drop in - Wow, is that really a knitting robot!?! Amazing, but how good are you at programming it? Can you make me a scarf with a diagonal pattern? I'd like it 4 rows by 4 stitches each, blue and white in a diagonal. You're up to that, right?</p>
  <img src="<%= asset_path('level2.4_goal.png') %>"  />
  <p>Hint: Each line in Roberta's scarf will need a blue stitch followed by some white stitches, and the number of blue stitches will be bigger in each line (and the number of white stitches will be smaller). See if you can do it once without reading the hint, and show Roberta that you've mastered the use of variables!</p>
</div>

<div class="csDialog" id="dialogCOMPARE" title="That's Right!">
  <p>You did it!<br/> Your code did the trick. Now before moving on, be sure to compare your solution (left) with the solution of another player (right). Remember there's no right or wrong, but seeing other people's work could help inspire you!</p>
  <table style="width: 100%">
    <tr>
	<td><div id="dialogCompareLeft" width="100%"></div></td>
	<td><div id="dialogCompareRight" width="100%"></div></td>
    </tr>
  </table>
</div>

<div class="csDialog" id="dialogEND" title="CONGRATULATIONS!">
  <p>You have completed all levels!!!<br/> Continue free play in the sandbox level, and check back in soon because we add levels and new features all the time.</p>
</div>

<div class="csDialog" id="dialogFail" title="Try Again">
  <p> That wasn't quite right. Review the Level Goal and Hints, and then give it another try.</p>
</div>

<table width="100%" align="center">

<tr>
<td rowspan=3 style="width:10%; background:none;">Level Selection
<br/>
<button class="csDiaBtn" id="openerSBX"><img src="<%= asset_path('sandbox.png'); %>"></button>
<button class="csDiaBtn" id="opener10">1.0</button>
<button class="csDiaBtn" id="opener11" disabled="true">1.1</button>
<button class="csDiaBtn" id="opener12" disabled="true">1.2</button>
<button class="csDiaBtn" id="opener13" disabled="true">1.3</button>
<button class="csDiaBtn" id="opener14" disabled="true">1.4</button>
<button class="csDiaBtn" id="opener15" disabled="true">1.5</button>
<button class="csDiaBtn" id="opener20" disabled="true">2.0</button>
<button class="csDiaBtn" id="opener21" disabled="true">2.1</button>
<button class="csDiaBtn" id="opener22" disabled="true">2.2</button>
<button class="csDiaBtn" id="opener23" disabled="true">2.3</button>
<button class="csDiaBtn" id="opener24" disabled="true">2.4</button>

</td>

<td rowspan=3 style="height:4in; width:50%; padding:1px">
Goal
 <div id="csLevelGoal"></div>
 <div id="csComments"></div>
<br/>
<hr/>
<div id="canvas" width="500" height="700" data-url="<%= asset_path('stitch_semitrans.png') %>">
  <img class="csKnittingNeedle" src="<%= asset_path('woodknitneedle.png') %>" style="width:100%">
  <div class="csRow">
  </div>
</div>
</td>

<td rowspan=1 id="scratchpad" width="50%" style="padding:0px; background:url('<%= asset_path('spiralnotepad.png') %>'); background-size: 100% 100%; background-repeat: no-repeat">
<div style="background-color:transparent"><br/><br/><br/><br/></div>
<textarea id="JSprogram" style="height:4in; width:99%; background-color:transparent; font-family: monospace; font-size: 16; font-weight: bold;" onkeyup="keyUp(event)">
// Lines starting with two slashes are comments



</textarea>
</td>

<td rowspan=1 style="width:20%; background:white;">
<img src="<%= asset_path('knitpatterns.png'); %>" id="csKnitPatterns" >
<div class="csKnitPatterns">(Coming Soon: save your favorite solutions and compare with others)</div>
</td>
</tr>

<tr>
<td colspan=3>

<form>
<input type="button" id="knitnowbutton" value=" GO " onclick="JSrun()"/>
<div id=radioset>
 <input type="radio" id="radio1" name="trans" value="200" checked ><label class="csRadioLabel" for="radio1">Slow</label>
 <input type="radio" id="radio2" name="trans" value="100"  ><label class="csRadioLabel" for="radio2">Medium</label>
 <input type="radio" id="radio3" name="trans" value="50" ><label class="csRadioLabel" for="radio3">Fast</label>
 <input type="radio" id="radio4" name="trans" value="10" ><label class="csRadioLabel" for="radio4">Instant</label>
</div>
</form>

<span id="csCheats">
 Cheats: <select id="JSexamples" onchange="JSselect()">
  <option value="cheats" selected>Cheats </option>
  <option value ="knitone">Knit One</option>
  <option value ="knitthree" >Knit Three</option>
  <option value="knitpurpleline">Knit Purple Line</option>
  <option value="knittworedlines">Knit Two Red Lines</option>
  <option value="knit2x8pattern">Knit 2x8 Pattern</option>
  <option value="knit4x8lines">Knit 4x8 Lines</option>
  <option value="knitpattysfavorite">Knit Patty's Favorite</option>
  <option value="knitsusanssquare">Knit Susan's Pink Square</option>
  <option value="knitsusanssquare4x8">Knit Susan's Pink Rectangle</option>
  <option value="knitrobertasdiag">Knit Roberta's Diagonal</option>
  <option value="knitcheckers">Knit Checkers</option>
  <option value="knitfunctioncheckers">Knit Function Checkers</option>
  <option value="knitdiagonal">Knit Diagonal</option>
  <option value="knitstripes">Knit Stripes</option>
</select>
</span>
</td>
<script type="text/javascript">
// Allow me a little script here to give action to my radio buttons.
// wrapped as a function to remove from global namespace
(function() {
    
    // onclick vs. onchange
    var radiobutton = document.getElementsByName("trans");
    for (var i=0, len=radiobutton.length; i<len; i++) {
        
        radiobutton[i].onchange = function() {
            knitspeed = this.value;
        };
    }
    
}());
</script>

</tr>
<tr>
<td colspan=3 width="100%" style="padding:0px">
<textarea id="JSoutput" value="Output will appear here in case of errors." style="height:1.5in; width:99%; font-family: monospace; font-size: 16;">
</textarea>
</td>
</tr>
</table>


<div>Color picker for quick Hex Code lookup: </br><input id="noIndColor"></input></div>

<table hidden="true">
<tr>
<td><b>Comment</b></td>
<td><pre>// this is a one-line comment
/* this comment could contain linebreaks */
</pre></td>
</tr>
<tr>
<td><b>Constant</b></td>
<td><tt><b>numbers</b> 12.3 <b>and strings</b> "hi", "hi".charAt(0) <b>is</b> "h"</tt></td>
</tr>
<tr>
<td><b>Variable</b></td>
<td><tt><b>start with a letter, then use letters, digits or _ (declared with</b> var<b>)</b></tt></td>
</tr>
<tr>
<td><b>Expression</b></td>
<td><tt><b>built from</b> +, -, *, /, pow(x,y), sqrt(), PI, E, log(), floor(), ceil(),</br>
random(), sin(), cos(), tan(), atan() <b>and constants, variables, functions</b></tt></td>
</tr>
<tr>
<td><b>Assignment</b></td>
<td><pre>v = expression;</pre></td>
</tr>
<tr>
<td><b>Block</b></td>
<td><pre>{   statement 1;
    ...
    statement n;
}</pre></td>
</tr>
<tr>
<td><b>Condition</b></td>
<td><tt>expression == expression <b>or</b> <=, <, >, >=, !=...<br>
<b>or</b> !cond, cond1 && cond2, cond1 || cond2</tt></td>
</tr>
<tr>
<td><b>if - else</b></td>
<td><pre>if (condition) block 1
else block 2                   // optional
</pre></td>
</tr>
<tr>
<td><b>for-loop</b></td>
<td><pre>for (var i=start; endcondition; i++)
    block
</pre></td>
</tr>
<tr>
<td><b>while-loop</b></td>
<td><pre>while (condition) 
    block
</pre></td>
</tr>
<tr>
<td><b>Function</b></td>
<td><pre>f = function(v1, ..., vn) {
    statement 1;
    ...
    return expression;
}
</pre></td>
</tr>
<tr>
<td><b>List</b> (array)</td>
<td><pre>a = [1,2,"hi"]
a[0] is 1, a.length is 3, a+[4] is [1,2,"hi",4]</pre></td>
</tr>
<tr>
<td><b>Object</b><br/>(hash tables)</td>
<td><pre>object = {attribute:expression, method:function}
a = {x:2, y:3, s:function(){return this.x+this.y}}
a.x is 3, a["x"] is 3, a.s() is 5
</pre></td>
</tr>
<tr>
<td><b>Output</b></td>
<td><pre>write("Hello"); writeln(" world");
</pre></td>
</tr>
</table>
</p>

<textarea id="knitone" style="display:none">
// Knit a single purple stitch

setColor("purple");
stitch();

</textarea>

<textarea id="knitthree" style="display:none">
// Knit three stitches in different colors

setColor("red");
stitch();
setColor("#00ff00");
stitch();
setColor("blue");
stitch();


</textarea>

<textarea id="knitpurpleline" style="display:none">
// Knit a line of 8 purple stitches

setColor("purple");
stitch(8);

</textarea>

<textarea id="knittworedlines" style="display:none">
// Knit two red lines of 8 stitches each.

setColor("#ff0000");
stitch(8);
newRow();
stitch(8);

</textarea>

<textarea id="knit2x8pattern" style="display:none">
// Knit a pattern Ax4-Bx4/Bx4-Ax4

setColor("blue");
stitch(4);
setColor("orange");
stitch(4);
newRow();
stitch(4);
setColor("blue");
stitch(4);

</textarea>

<textarea id="knit4x8lines" style="display:none">
//Knit a pattern 4x8 with each line differently colored

setColor("#981ba2");
stitch(8);
newRow();
setColor("#292d3f");
stitch(8);
newRow();
setColor("#ec8484");
stitch(8);
newRow();
setColor("#a8948b");
stitch(8);
newRow();

</textarea>
<textarea id="knitpattysfavorite" style="display:none">
//Knit a checkered pattern 3x3 in Patty's favorite colors

setColor("#8A2BE2");
stitch();
setColor("#D4AF37");
stitch();
setColor("#8A2BE2");
stitch();
newRow();
setColor("#D4AF37");
stitch();
setColor("#8A2BE2");
stitch();
setColor("#D4AF37");
stitch();
newRow();
setColor("#8A2BE2");
stitch();
setColor("#D4AF37");
stitch();
setColor("#8A2BE2");
stitch();
</textarea>
<textarea id="knitrobertasdiag" style="display:none">
var lineWidth = 4;
var blueStitches = 1;
setColor("blue");
stitch(blueStitches);
setColor("white");
stitch(lineWidth - blueStitches);
newRow();
blueStitches = blueStitches + 1; //now blueStitches is equal to 2
setColor("blue");
stitch(blueStitches);
setColor("white");
stitch(lineWidth - blueStitches);
newRow();
blueStitches = blueStitches + 1;
setColor("blue");
stitch(blueStitches);
setColor("white");
stitch(lineWidth - blueStitches);
newRow();
blueStitches = blueStitches + 1;
setColor("blue");
stitch(blueStitches);
setColor("white");
stitch(lineWidth - blueStitches);
blueStitches = blueStitches + 1;
</textarea>

<textarea id="knitcheckers" style="display:none">
// Knit a checkered pattern

for(a=0;a<11;a++) {
  for(b=0;b<5;b++) {
    setColor("#f5da35");
    stitch();
    setColor("#9123d5");
    stitch();
  }
  newRow();
  for(b=0;b<5;b++) {
    setColor("#9123d5");
    stitch();
    setColor("#f5da35");
    stitch();
  }
  newRow();
}
</textarea>

<textarea id="knitsusanssquare" style="display:none">
var pink = "#FFC0CB";
var lineWidth = 4;
setColor(pink);
stitch(lineWidth);
newRow();
stitch(lineWidth);
newRow();
stitch(lineWidth);
newRow();
stitch(lineWidth);
    
</textarea>

<textarea id="knitsusanssquare4x8" style="display:none">
var pink = "#FFC0CB";
var lineWidth = 8;
setColor(pink);
stitch(lineWidth);
newRow();
stitch(lineWidth);
newRow();
stitch(lineWidth);
newRow();
stitch(lineWidth);
    
</textarea>

<textarea id="knitfunctioncheckers" style="display:none">
// Knit a fancy checkered pattern

function myLine(a,b) {
  for(ind=0;ind<3;ind++) {
    setColor(a);
    stitch(2);
    setColor(b);
    stitch(2);
  }
  newRow();
}
for(a=0;a<5;a++) {
  myLine('green', 'red');
  myLine('green', 'red');
  myLine('red', 'green');
  myLine('red', 'green');

}

</textarea>

<textarea id="knitdiagonal" style="display:none">
// Knit a diagonal pattern

var i=0;
for(a=0;a<35;a++) {
  setColor("#f5da35");
  stitch(i/3);
  setColor("#9123d5");
  stitch(12-i/3);
  newRow();
  i++;
}
</textarea>

<textarea id="knitstripes" style="display:none">
// Use a function to knit stripes

knitWholeLine = function(color) {
  
  setColor(color);
  stitch(10);
  newRow();
}

for(i=0;i<7;i++){
knitWholeLine("blue");
knitWholeLine("red");
knitWholeLine("white");
}
</textarea>


<hr/>

<div align="center">
<a href="http://playcodestitch.com">CodeStitch </a> - Designed by Marleen Villeroy, 
April 2016, at 
<a href="http://tc.columbia.edu/">Teachers College, Columbia University</a>
</div>
</body>
</html>
