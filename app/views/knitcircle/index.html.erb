<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>KnitShop, a game for learning to code</title>
<script>
/*
<Add a description of the game here>
The code in this game is built upon a javascript interpreter by 
Peter Jipsen - referenced here by way of thanks.
Version of Jan 3, 2013, (c) Peter Jipsen http://www.chapman.edu/~jipsen
Latest version at http://www.chapman.edu/~jipsen/js
If you use it on a webpage, please send the URL to jipsen@chapman.edu
Mr. Jipsen's interpreter and this game are both 
free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License (at http://www.gnu.org/copyleft/gpl.html) 
for more details.
*/
// Global variables
var KnitShopStitchHeight=18;
var KnitShopStitchWidth=30;
var stitches = [];
var alreadyDrawing;
var KnitShopXPosition,KnitShopYPosition;
var ksr,ksg,ksb;
var ksColor;
var knitspeed = 200;
var csCurrentLevel = 0;
var csLevelsCompleted = [];
var csMySolution = "";
var csHerSolution = "";

JSoutput = function(a) {
    var str = "["
    if (typeof(a)=="object" && a.length) {
        for (var i=0; i < a.length; i++) 
            if (typeof(a[i])=="object" && a[i].length) {
                str += (i==0?"":" ")+"["
                for (var j=0; j<a[i].length; j++) 
                    str += a[i][j]+(j==a[i].length-1?
                            "]"+(i==a.length-1?"]":",")+"\n":", ");
            } else str += a[i]+(i==a.length-1?"]":", ");
    } else str = a;
    return str;
}


newRow = function() {
	stitches.push("newrow");
	drawQueue();
}
setColor = function(r,g,b) {
   ksr = r;
   ksg = g;
   ksb = b;
 
   if(r != null && g == null && b == null) {
      //assume at this point that a string was given as first argument
      //if the argument begins with #, it's a hex color, otherwise it's text
  if(r.charAt(0) == '#') {
	  ksColor=r;
	  return;
  }
  
  switch (r) {
        case "purple":
	   ksColor="#A020F0";
	   ksr=160;
	   ksg=32;
	   ksb=240;
	   break;
	case "black":
	   ksColor="#000000";
           ksr=0;
	   ksg=0;
	   ksb=0;
           break;
        case "white":
	   ksColor="#FFFFFF";
           ksr=255;
	   ksg=255;
	   ksb=255;
           break;    
        case "red":
	   ksColor="#FF0000";
           ksr=255;
	   ksg=0;
	   ksb=0;
           break;
        case "green":
	   ksColor="#00FF00";
           ksr=0;
	   ksg=255;
	   ksb=0;
           break;
        case "blue":
	   ksColor="#0000FF";
           ksr=0;
	   ksg=0;
	   ksb=255;
           break;
        case "yellow":
	   ksColor="#FFFF00";
	   ksr=255;
	   ksg=255;
	   ksb=0;
	   break;
	case "orange":
	   ksColor="#FFA500";
	   ksr=255;
	   ksg=165;
	   ksb=0;
	   break;
	default:
           ksColor="#ffffff";
	   //stitchRGB(0,0,0);
     }
   }
}
stitch = function(x) {
   if(x == null) x=1;
   if(ksColor == null) ksColor="#000000";
   for(stitchindex = 0; stitchindex<x; stitchindex++){
	stitches.push(ksColor);
   }
   drawQueue();
}

blankStitch = function(x) {
   if(x == null) x=1;
   for(stitchindex = 0; stitchindex<x; stitchindex++){
        stitches.push("blankstitch");
   }
   drawQueue();
}


function drawQueue() {
	if(alreadyDrawing) {
		return;
	}
	alreadyDrawing = true;
	
	setTimeout(function drawStitches() {
		var drawColor = stitches.shift();
		if(!drawColor) {
			alreadyDrawing = false;
			//we've completed drawing the whole queue, now test for level completion
                        var lvlCompleted = csTestLevelCompleted();
		        if(lvlCompleted) {
			   if( $('#current_user').length > 0 ) {
				//save the solution under this user's collection of solutions
				var solutionString = escape(document.getElementById("JSprogram").value);
				var csrfToken = $('#csrf-token').val();
		           //we're going to do this the AJAX way so our game
			   //remains a single-page application.
				$.ajax("/solutions", {type: "POST", async: true, data: {content: solutionString, level: csCurrentLevel }})
			   }
		           csAdvanceLevel();
		        }
		        if(!lvlCompleted) {
                          if( $('#current_user').length > 0 ) {
			   //Save the attempt for future reference
			   var solutionString = escape(document.getElementById("JSprogram").value);
			   $.ajax("/attempts", {type: "POST", async: true, data: {content: solutionString, level: csCurrentLevel }})
                          }
		           // output something in the hint field
			   $( "#dialogFail" ).dialog( "open" ); 
			   var ran = Math.random();
			   ran = Math.floor(ran*100 % csSnarkyRemarks.length);
			   $( "#csComments" ).html(csSnarkyRemarks[ran]);
		        }
                        
			return;
		}
		//If the previous if didn't catch, then we're still drawing the queue elements
		if(drawColor == "newrow" || drawColor == "blankstitch") {
			if(drawColor == "newrow") drawNewRow();
			if(drawColor == "blankstitch") drawBlankStitch();
		}
		else {
			draw(drawColor);
		}
		setTimeout(drawStitches, knitspeed);
	},knitspeed); //end of first setTimeout call
  var c = document.getElementById("html5canvas");
  var tmppng = c.toDataURL('image/png');
  var tmpimage = document.getElementById("thumbnail");
  tmpimage.setAttribute("src",tmppng);
}
function draw(rgb) {
    //var ctx=document.getElementById("canvas").getContext('2d'); 
    //ctx.fillStyle = 'rgba('+ksr+','+ksg+','+ksb+',1)';
    //window.requestAnimationFrame(draw);
	var c = document.getElementById("html5canvas");
  var ctx = c.getContext("2d");
  var img = document.getElementById("stitchpng");
  //ctx.moveTo(KnitShopXPosition,KnitShopYPosition);
  ctx.fillStyle=rgb;
  ctx.fillRect(KnitShopXPosition,KnitShopYPosition,KnitShopStitchWidth,KnitShopStitchHeight)
  ctx.drawImage(img,KnitShopXPosition,KnitShopYPosition,KnitShopStitchWidth,KnitShopStitchHeight);
  KnitShopXPosition+=KnitShopStitchWidth;

	/*var easel = document.getElementById("canvas").lastChild.lastChild;
	//at this point, easel is the last div under canvas.
	var stitchnode = document.createElement("img");
	//stitchnode.setAttribute("src", "//public/images/stitch_semitrans.png");
        stitchnode.setAttribute("src", " <%= asset_path('stitch_semitrans.png')  %> "); //$(canvas).data("data-url");
	stitchnode.setAttribute("class","csStitch");
	stitchnode.setAttribute("style", "vertical-align:top; width:"+KnitShopStitchWidth+"px; height:"+KnitShopStitchHeight+"px; background-color:"+rgb+";");
	//stitchnode.setAttribute("height", "23");
	//stitchnode.setAttribute("width","38");
	easel.appendChild(stitchnode);
	*/
	//desired resulting node: <img src="stitch.jpg" height="40" width="40" />
}
function drawNewRow() {
	/*var canvas = document.getElementById("canvas");
	var node = document.createElement("div");
	node.setAttribute("class","csRow");
	canvas.appendChild(node); */
  KnitShopXPosition=0;
  KnitShopYPosition += KnitShopStitchHeight;
}
function drawBlankStitch() {
	KnitShopXPosition += KnitShopStitchWidth;
  /*var easel = document.getElementById("canvas").lastChild;
	var stitchnode = document.createElement("img");
	stitchnode.setAttribute("src", " <%= asset_path('stitch_blank.png')  %> ");
	stitchnode.setAttribute("style", "vertical-align:top; width:"+KnitShopStitchWidth+"px; height:"+KnitShopStitchHeight+"px;");
	easel.appendChild(stitchnode); */
}


//This function unfortunately didn't allow for a repaint between actions, so it's not useful
KSWait = function(KnitShopms){
//TODO: make KnitShopms variable depending on a configurable parameter.
    if(!KnitShopms || KnitShopms>10000) KnitShopms=250;
    var start = new Date().getTime();
    var current = new Date().getTime();
    var end = start+KnitShopms;
    while(current < end) {
       current = new Date().getTime();
    }
}
//TODO: define the size of the canvas, or query it, and add as numbers below
clearCanvas = function() {
  KnitShopXPosition = 0;
  KnitShopYPosition = 0;
  //var canvas = document.getElementById("canvas");
	//canvas.innerHTML = "<img class='csKnittingNeedle' src='<%= asset_path('woodknitneedle.png') %>' style='width:100%'><div class='csRow'></div>";
}
JSrun = function() {
    //Easter Egg
    if(document.getElementById("JSprogram").value.trim() == "MEOW") {
	document.getElementById("csCheats").style.display = "block";
        ga('set', 'page', '/csMEOW');
        ga('send', 'pageview');
	return;
    }
    // Notify Google Analytics of user activity each time the user hits "GO"
    // Find definition of this function in codeStitch.js

    //Google says do not create new trackers in Single Page Apps, so this is commented out.
    //ga('create', 'UA-76776475-1', 'auto');
    var csGAPageName = "/csKnitCircle";
    ga('set', 'page', csGAPageName);
    ga('send', 'pageview');
 

    var str;
    alreadyDrawing = false;
    clearCanvas();
    var outnode = document.getElementById("JSoutput");
    outnode.value = "";
    //d = new Date().getTime();
    try {
        with (Math) {
	    
            str = JSoutput(eval(document.getElementById("JSprogram").value));
        }
    } catch(e) {
        str = e.name+" at line "+(e.lineNumber-56)+": "+e.message;
        if( $("#current_user" ).length > 0) {
          //AJAX call to insert failed attempt
	  var solutionString = escape(document.getElementById("JSprogram").value);
          $.ajax("/attempts", {type: "POST", async: true, data: {content: solutionString, level: csCurrentLevel }})
        }

    }
    //var tnode = document.getElementById("JStiming");
    //tnode.innerHTML = ""+(new Date().getTime()-d)/1000;
    if (str != undefined) {outnode.value += str;}
}
csTestLevelCompleted = function() {
   return true;
	
}

addToPatterns = function(sol_id) {
	$.ajax({url: "/patterns", async: true, type: "POST", data: {solution_id: sol_id}});
 };
saveSolution = function(level_number) {
        var solutionString = escape(document.getElementById("JSprogram").value);
        $.ajax("/solutions", {type: "POST", async: true, data: {content: solutionString, level: level_number }})

};
csPresentAlternateSolution = function() {
                //AJAX call to retrieve compare solution
                //Note that calling /solutions will return an html formatted
                //representation of the solution, but calling /solutions.json
                //will return an object of type Solution.

		csMySolution = document.getElementById("JSprogram").value;

                $.ajax({url: "/solutions.json", async: true, data: {level: csCurrentLevel-1 }, datatype: "json"}).done( 
                        function( data ) {$("#dialogCompareRight").html("<h3>"+data.first_name +"\'s Solution:</h3><a id=\"addPattern\" title=\"Click to save in your Patterns Drawer\" href=# onclick=\"addToPatterns("+data.id+");return false;\">Save in Patterns</a><textarea style=\"width: 100%; height: 4in\">"+unescape(data.content)+"</textarea>")}
                );

                $("#dialogCompareLeft").html("<h3>Your Solution:</h3><a id=\"addMyPattern\" title=\"Click to save in your Patterns Drawer\" href=# onclick=\"addToPatterns(0);return false;\">Save in Patterns</a><textarea style=\"width: 100%; height: 4in\">"+csMySolution+"</textarea>");
                $("#dialogCOMPARE").dialog( "open" );

}
csAdvanceLevel = function() {
   //Do nothing.
}
JSselect = function() {
    var id = document.getElementById("JSexamples").value;
    var str = document.getElementById(id).value;
    document.getElementById("JSprogram").value = str;
    JSrun();
}
keyUp = function(event){
  if (event.which==77 && event.ctrlKey) JSrun();
}
/*
//General TODO's
- Look up the pixel width on an ipad in portrait mode and make the <tr> containing the code and output
  add up to that width. No messing with percentages, make this explicit.
X must implement game flow and level logic.
- come up with at least 12 levels of incremental difficulty.
X find some way to animate the knitting instead of immediately showing the result.
- Show user name instead of user ID in the patterns box next to saved solutions.
- Show thumbnail images of patterns next to their code in the patterns box.

*/

var getCurrentLevelButton = function(levelIndex) {
        if(levelIndex <= 5 ) {
           return  "#opener1"+btnIndex;
        }
        if(levelIndex > 5) {
           var lvlname = levelIndex -6;
           return "#opener2"+lvlname ;
        }

}
</script>
<script>
  //This script will run once upon loading the page
  //The following is JQuery UI scripting for User Interface effects
  $(function() {
    var enablebutton;
    $( ".csDialog" ).dialog({
      autoOpen: false,
      show: {
        effect: "blind",
        duration: 1000
      },
      hide: {
        effect: "explode",
        duration: 1000
      },
	  buttons: [ {
		text: "Okay",
		click: function() { $(this).dialog("close");}
	   }
	  ],
      width: 500,
    });
    $( "#dialogCOMPARE" ).dialog({
      autoOpen: false,
      show: {
        effect: "blind",
        duration: 1000
      },
      hide: {
        effect: "explode",
        duration: 1000
      },
          buttons: [ {
                text: "Okay",
                click: function() { $(this).dialog("close");}
           }
          ],
      width: 1000,
      height: 700,
    });
    $( "#dialogPATTERNS" ).dialog({
      autoOpen: false,
      show: {
        effect: "blind",
        duration: 1000
      },
      hide: {
        effect: "explode",
        duration: 1000
      },
          buttons: [ {
                text: "Okay",
                click: function() { $(this).dialog("close");}
           }
          ],
      width: 1000,
    });


    $( ".csDiaBtn" ).button();
    for (btnIndex=0; btnIndex <= getCookie("csLvl"); btnIndex++) {
	enablebutton = getCurrentLevelButton(btnIndex);
	$( enablebutton).button("enable");
	csCurrentLevel = btnIndex;
    }
    
    $( "#radioset" ).buttonset();
    $( "#knitnowbutton" ).button();
    
    
    $( "#csKnitPatterns" ).on('click', function() {
      //Fill the patternsTable with content via AJAX query
      $.ajax({url: "/patterns.json", async: true, datatype: "json"}).done( 
	function(data) {
          //for each pattern in data, make a table row showing user and content
 	 if(data.length > 0) { $( "#patternsTable").html(""); }
         $.each(data,  function(index) {
	    var newPatternRow = document.createElement("tr");
            var newPatternName = document.createElement("td");
            var newPatternContent = document.createElement("td");
	    var newTextarea = document.createElement("textarea");
            newTextarea.setAttribute("style", "width: 100%;");

            var csNode = document.createTextNode("User: " +data[index].user_id + ", Level: "+data[index].level);
            newPatternName.appendChild(csNode);
            csNode = document.createTextNode(unescape(data[index].content));
            newPatternContent.appendChild(newTextarea);
	    newTextarea.appendChild(csNode);
            //var stitchnode = document.createElement("img");
        //stitchnode.setAttribute("src", "//public/images/stitch_semitrans.png");
	    newPatternRow.appendChild(newPatternName);
	    newPatternRow.appendChild(newPatternContent);
	    $( "#patternsTable" ).append(newPatternRow);
	 });

        }
      ); //end of ajax call. 
      $( "#dialogPATTERNS" ).dialog( "open" );
    });
    
    $( "#openerSBX" ).click(function() {
      $( "#csLevelGoal").html("<p>Sandbox - open play<br/> What will <b>you</b> make?</p>");
      csCurrentLevel = 999;

      if( $("#current_user" ).length > 0) {
	// First save this solution under the User's ID...
	// Second, add a pattern link to the solution just saved.
        $( "#csLevelGoal").html("<p>Sandbox - open play<br/> What will <b>you</b> make?</p><a id=\"addSBXPattern\" title=\"Click to save in your Patterns Drawer\" href=# onclick=\"addToPatterns(0);return false;\">Save in Patterns</a>");
      }
    });

    $('#noIndColor').colorpicker({
	displayIndicator: false,
	defaultPalette: 'web',
	color: '#17b13a'
    });
    $( enablebutton ).click();
  });
</script>
<style>td {background:white; vertical-align:top; border:1px solid black; padding:2px 10px}
pre {margin:0}
table {border-collapse:collapse; table-layout:fixed}
body {background: #f5da35; font-family:Arial}
textarea {font-family:Lucida console}
</style>
</head>
<body onload="JSrun()"><!-- onpaste="return false;"-->

<div class="csDialog" id="dialogPATTERNS" title="Your Patterns Drawer" style="width: 800;">
  <p>These are solutions you've saved for later use. Copy pieces into your next projects and learn from other peoples' solutions!</p>
  <table id="patternsTable" style="width: 100%">
    <tr>
        <td><div>You haven't saved any solutions here yet.</div></td>
    </tr>
  </table>
</div>



<table width="100%" align="center">

<tr>
<td rowspan=3 style="width:10%; background:none;">Level Selection
<br/>
<button class="csDiaBtn" id="openerSBX"><img src="<%= asset_path('sandbox.png'); %>"></button>

</td>

<td rowspan=3 style="height:4in; width:50%; padding:1px">
Goal
 <div id="csLevelGoal"></div>
 <div id="csComments"></div>
<br/>
<hr/>
<div id="canvas" width="500" height="700" data-url="<%= asset_path('stitch_semitrans.png') %>">
  BIG TO-DO: make this div element a CANVAS a-la HTML5
  <img class="csKnittingNeedle" src="<%= asset_path('woodknitneedle.png') %>" style="width:100%">
  <canvas id="html5canvas" width="500" height="600">
    <div class="csRow">
    </div>
  </canvas>
</div>
</td>

<td rowspan=1 id="scratchpad" width="50%" style="padding:0px; background:url('<%= asset_path('spiralnotepad.png') %>'); background-size: 100% 100%; background-repeat: no-repeat">
<div style="background-color:transparent"><br/><br/><br/><br/></div>
<textarea id="JSprogram" style="height:4in; width:99%; background-color:transparent; font-family: monospace; font-size: 16; font-weight: bold;" onkeyup="keyUp(event)">
// Lines starting with two slashes are comments



</textarea>
</td>

<td rowspan=1 style="width:20%; background:white;">
<img src="<%= asset_path('knitpatterns.png'); %>" id="csKnitPatterns" >
<div class="csKnitPatterns">(Click the image to see the solutions you've saved and reuse them)</div>
</td>
</tr>

<tr>
<td colspan=3>

<form>
<input type="button" id="knitnowbutton" value=" GO " onclick="JSrun()"/>
<div id=radioset>
 <input type="radio" id="radio1" name="trans" value="200" checked ><label class="csRadioLabel" for="radio1">Slow</label>
 <input type="radio" id="radio2" name="trans" value="100"  ><label class="csRadioLabel" for="radio2">Medium</label>
 <input type="radio" id="radio3" name="trans" value="50" ><label class="csRadioLabel" for="radio3">Fast</label>
 <input type="radio" id="radio4" name="trans" value="10" ><label class="csRadioLabel" for="radio4">Instant</label>
</div>
</form>

<span id="csCheats">
 Cheats: <select id="JSexamples" onchange="JSselect()">
  <option value="cheats" selected>Cheats </option>
  <option value ="knitone">Knit One</option>
  <option value ="knitthree" >Knit Three</option>
  <option value="knitpurpleline">Knit Purple Line</option>
  <option value="knittworedlines">Knit Two Red Lines</option>
  <option value="knit2x8pattern">Knit 2x8 Pattern</option>
  <option value="knit4x8lines">Knit 4x8 Lines</option>
  <option value="knitpattysfavorite">Knit Patty's Favorite</option>
  <option value="knitsusanssquare">Knit Susan's Pink Square</option>
  <option value="knitsusanssquare4x8">Knit Susan's Pink Rectangle</option>
  <option value="knitrobertasdiag">Knit Roberta's Diagonal</option>
  <option value="knitcheckers">Knit Checkers</option>
  <option value="knitfunctioncheckers">Knit Function Checkers</option>
  <option value="knitdiagonal">Knit Diagonal</option>
  <option value="knitstripes">Knit Stripes</option>
</select>
</span>
</td>
<script type="text/javascript">
// Allow me a little script here to give action to my radio buttons.
// wrapped as a function to remove from global namespace
(function() {
    
    // onclick vs. onchange
    var radiobutton = document.getElementsByName("trans");
    for (var i=0, len=radiobutton.length; i<len; i++) {
        
        radiobutton[i].onchange = function() {
            knitspeed = this.value;
        };
    }
    
}());
</script>

</tr>
<tr>
<td colspan=3 width="100%" style="padding:0px">
<textarea id="JSoutput" value="Output will appear here in case of errors." style="height:1.5in; width:99%; font-family: monospace; font-size: 16;">
</textarea>
</td>
</tr>
</table>
<img src= "<%= asset_path('stitch_semitrans.png')  %>" id="stitchpng" hidden="true">
<img id="thumbnail" src= "<%= asset_path('stitch_semitrans.png')  %>" >

<div>Color picker for quick Hex Code lookup: </br><input id="noIndColor"></input></div>


<textarea id="knitone" style="display:none">
// Knit a single purple stitch

setColor("purple");
stitch();

</textarea>

<textarea id="knitthree" style="display:none">
// Knit three stitches in different colors

setColor("red");
stitch();
setColor("#00ff00");
stitch();
setColor("blue");
stitch();


</textarea>

<textarea id="knitpurpleline" style="display:none">
// Knit a line of 8 purple stitches

setColor("purple");
stitch(8);

</textarea>

<textarea id="knittworedlines" style="display:none">
// Knit two red lines of 8 stitches each.

setColor("#ff0000");
stitch(8);
newRow();
stitch(8);

</textarea>

<textarea id="knit2x8pattern" style="display:none">
// Knit a pattern Ax4-Bx4/Bx4-Ax4

setColor("blue");
stitch(4);
setColor("orange");
stitch(4);
newRow();
stitch(4);
setColor("blue");
stitch(4);

</textarea>

<textarea id="knit4x8lines" style="display:none">
//Knit a pattern 4x8 with each line differently colored

setColor("#981ba2");
stitch(8);
newRow();
setColor("#292d3f");
stitch(8);
newRow();
setColor("#ec8484");
stitch(8);
newRow();
setColor("#a8948b");
stitch(8);
newRow();

</textarea>
<textarea id="knitpattysfavorite" style="display:none">
//Knit a checkered pattern 3x3 in Patty's favorite colors

setColor("#8A2BE2");
stitch();
setColor("#D4AF37");
stitch();
setColor("#8A2BE2");
stitch();
newRow();
setColor("#D4AF37");
stitch();
setColor("#8A2BE2");
stitch();
setColor("#D4AF37");
stitch();
newRow();
setColor("#8A2BE2");
stitch();
setColor("#D4AF37");
stitch();
setColor("#8A2BE2");
stitch();
</textarea>
<textarea id="knitrobertasdiag" style="display:none">
var lineWidth = 4;
var blueStitches = 1;
setColor("blue");
stitch(blueStitches);
setColor("white");
stitch(lineWidth - blueStitches);
newRow();
blueStitches = blueStitches + 1; //now blueStitches is equal to 2
setColor("blue");
stitch(blueStitches);
setColor("white");
stitch(lineWidth - blueStitches);
newRow();
blueStitches = blueStitches + 1;
setColor("blue");
stitch(blueStitches);
setColor("white");
stitch(lineWidth - blueStitches);
newRow();
blueStitches = blueStitches + 1;
setColor("blue");
stitch(blueStitches);
setColor("white");
stitch(lineWidth - blueStitches);
blueStitches = blueStitches + 1;
</textarea>

<textarea id="knitcheckers" style="display:none">
// Knit a checkered pattern

for(a=0;a<11;a++) {
  for(b=0;b<5;b++) {
    setColor("#f5da35");
    stitch();
    setColor("#9123d5");
    stitch();
  }
  newRow();
  for(b=0;b<5;b++) {
    setColor("#9123d5");
    stitch();
    setColor("#f5da35");
    stitch();
  }
  newRow();
}
</textarea>

<textarea id="knitsusanssquare" style="display:none">
var pink = "#FFC0CB";
var lineWidth = 4;
setColor(pink);
stitch(lineWidth);
newRow();
stitch(lineWidth);
newRow();
stitch(lineWidth);
newRow();
stitch(lineWidth);
    
</textarea>

<textarea id="knitsusanssquare4x8" style="display:none">
var pink = "#FFC0CB";
var lineWidth = 8;
setColor(pink);
stitch(lineWidth);
newRow();
stitch(lineWidth);
newRow();
stitch(lineWidth);
newRow();
stitch(lineWidth);
    
</textarea>

<textarea id="knitfunctioncheckers" style="display:none">
// Knit a fancy checkered pattern

function myLine(a,b) {
  for(ind=0;ind<3;ind++) {
    setColor(a);
    stitch(2);
    setColor(b);
    stitch(2);
  }
  newRow();
}
for(a=0;a<5;a++) {
  myLine('green', 'red');
  myLine('green', 'red');
  myLine('red', 'green');
  myLine('red', 'green');

}

</textarea>

<textarea id="knitdiagonal" style="display:none">
// Knit a diagonal pattern

var i=0;
for(a=0;a<35;a++) {
  setColor("#f5da35");
  stitch(i/3);
  setColor("#9123d5");
  stitch(12-i/3);
  newRow();
  i++;
}
</textarea>

<textarea id="knitstripes" style="display:none">
// Use a function to knit stripes

knitWholeLine = function(color) {
  
  setColor(color);
  stitch(10);
  newRow();
}

for(i=0;i<7;i++){
knitWholeLine("blue");
knitWholeLine("red");
knitWholeLine("white");
}
</textarea>


<hr/>

<div align="center">
<a href="http://playcodestitch.com">CodeStitch </a> - Designed by Marleen Villeroy, 
April 2016, at 
<a href="http://tc.columbia.edu/">Teachers College, Columbia University</a>
</div>
</body>
</html>
